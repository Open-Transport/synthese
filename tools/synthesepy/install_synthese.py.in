#!/usr/bin/env python
#
#    Synthese install script.
#    @file install_synthese.py
#    @author Sylvain Pasche
#
#    This file belongs to the SYNTHESE project (public transportation specialized software)
#    Copyright (C) 2002 Hugues Romain - RCSmobility <contact@rcsmobility.com>
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import logging
import optparse
import os
from os.path import join
import shutil
import subprocess
import sys
import urlparse

log = logging.getLogger(__name__)

ARCHIVE_URL = '@@ARCHIVE_URL@@'
PREFIX = '@@PREFIX@@'

ARCHIVE_NAME = ARCHIVE_URL.split('/')[-1]

def download_and_replace():
    prefix_parent = os.path.dirname(PREFIX)
    prefix_tail = os.path.basename(PREFIX)

    temp_dir = join(prefix_parent, 'synthese_install_tmp')
    if os.path.isdir(temp_dir):
        shutil.rmtree(temp_dir)
    os.makedirs(temp_dir)

    parse_res = list(urlparse.urlparse(ARCHIVE_URL))
    if 'SYNTHESE_OVERRIDE_HOSTNAME' in os.environ:
        parse_res[1] = os.environ['SYNTHESE_OVERRIDE_HOSTNAME']
    archive_url = urlparse.urlunparse(parse_res)

    log.info('Downloading archive %r to %r.', archive_url, temp_dir)
    subprocess.check_call(
        'curl -s -o {0} {1}'.format(ARCHIVE_NAME, archive_url),
        shell=True, cwd=temp_dir)

    log.info('Extracting %r.', ARCHIVE_NAME)
    subprocess.check_call(
        'tar jxf {0}'.format(ARCHIVE_NAME),
        shell=True, cwd=temp_dir)

    new_dir = join(temp_dir, prefix_tail)
    old_dir = join(temp_dir, 'old')
    log.info('Swapping %r with %r', new_dir, PREFIX)
    if os.path.isdir(PREFIX):
        os.rename(PREFIX, old_dir)
    os.rename(new_dir, PREFIX)
    shutil.rmtree(temp_dir)


def system_install():
    synthesepy = join(PREFIX, 'bin', 'synthese.py')
    log.info('Running system_install command')
    cmd = [sys.executable, synthesepy]
    if '-v' in sys.argv:
        cmd.append('-v')
    cmd.append('system_install')
    subprocess.check_call(cmd)


if __name__ == '__main__':
    usage = 'usage: %prog [options]'
    parser = optparse.OptionParser(usage=usage)

    parser.add_option('-v', '--verbose', action='store_true',
         default=False, help='Print debug logging')

    (options, args) = parser.parse_args()
    if len(args) != 0:
        parser.print_help()
        sys.exit(1)

    logging.basicConfig(level=(logging.DEBUG if options.verbose else
                               logging.INFO))

    if (sys.platform != 'win32' and
        os.environ.get('SYNTHESE_SKIP_ROOT_CHECK') != '1'
        and os.geteuid() != 0):
        raise Exception('This script should be run as root')

    download_and_replace()
    if 'SYNTHESE_NO_SYSTEM_INSTALL' not in os.environ:
        system_install()
