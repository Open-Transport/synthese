/** @page archi-externe Intégration de SYNTHESE dans une architecture type ITS

SYNTHESE est un système d'information-voyageurs (SIV) qui s'inscrit  dans une architecture de système de transports intelligents (ITS) à plusieurs composants, chacun ayant un périmètre d'intervention qui lui est propre :

<ul>
<li>les données théoriques proviennent des <a href="http://fr.wikipedia.org/wiki/Graphicage_et_habillage" terget="_blank">serveurs de graphicage</a> et/ou sont saisies par un opérateur. Dans tous les cas, celui-ci reste en général obligatoire pour effectuer la fusion des données issues de plusieurs réseaux et pour convertir ces données en données d'information. Les données importées respectent aujourd'hui le format français Trident, et seront demain remplacées par des données au format européen Netex.</li>
<li>les données temps réel proviennent des serveurs d'aide à l'exploiation (SAE) et sont transmises à SYNTHESE sous le format européen SIRI.</li>
<li>SYNTHESE constitue alors un référentiel d'information-voyageurs, sur lequel s'appuient des algorithmes avancés, réalisant le métier de l'information-voyageurs.</li>
</ul>

SYNTHESE est dédié à l'information-voyageurs : il est alimenté à partir de données d'exploitation transformées ou remplacées par des données d'information. Cette conversion est loin d'être triviale et porte en elle la richesse fonctionnelle du SIV. Ceci est l'une des principales raisons qui poussent aujourd'hui les exploitatnts de réseaux à découpler les SAE et les SIV.

Le diagramme suivant représente une architecture ITS standard intégrant le SIV SYNTHESE :

@image html archi-externe.png
@image latex archi-externe.png width=10cm


@page archi-monitoring Intégration de SYNTHESE dans une architecture de supervision basée sur Nagios

<h2>Présentation</h2>
SYNTHESE peut être intégré à une centrale de supervision basée sur le serveur Nagios. Cette architecture repose sur un mécanisme à plusieurs rôles, qui échangent des informations de manière asynchrone.

@image html archi-monitoring.png
@image latex archi-monitoring.png width=10cm

Les points pouvant être supervisés sont :
<ul>
<li>Etat du matériel de téléaffichage (fonction DisplayScreenSupervisionFunction)</li>
<li>Cohérence des données (fonction pt::CheckLineCalendarFunction)</li>
</ul>

<h2>Services</h2>

Les quatre rôles clés sont les suivants :
<ul>
<li>A :	Le service <b>SYNTHESE</b> est chargé de collecter les différents messages de supervision envoyés aléatoirement par les différents matériels, selon différents protocoles, et les stocker pour rediffusion sur demande sous un format unique. SYNTHESE est également chargé d'exporter la liste des éléments à superviser d'après sa base de données interne. SYNTHESE est donc en charge de la <i>traduction métier > informatique</i>.</li>
<li>B : Le service <b>Nagios</b> est chargé d'interroger le serveur SYNTHESE à intervalle régulier pour collecter le statut de chaque matériel et les données associées. En cas de problème, Nagios diffuse les alertes immédiatement. Nagios est donc en charge de la fonction <i>ordonnancement et contact</i>.</li>
<li>C : Le service <b>MySQL</b> accompagné du démon NDO est chargé d'historiser en continu les données collectées par Nagios et les mettre à disposition sur un serveur de base de données interrogeable par toute application apte à produire des états. Le seveur MySQL stocke également la configuration de Nagios. NDO et MySQL ont donc en charge la fonction de <i>stockage</i>.</li>
<li>D : Le service <b>Centréon</b> est chargé d'afficher les données de supervision en temps réel sur une interface web, et de proposer des fonctions d'analyse de l'historique (graphes, taux de fonctionnement, etc.) Centréon permet également d'effectuer les opérations de configuration de la partie alertes. Centréon a donc en charge la fonction de <i>présentation</i>.</li>
</ul>

<h2>Flux pour le contrôle des afficheurs</h2>

Les flux entre les rôles sont les suivants :
<ol>
<li>Transmission de l'état de l'afficheur à l'unité centrale de contrôle par le matériel d'affichage</li>
<li>Transmission de l'état de l'afficheur de l'unité centrale vers le service SYNTHESE par le client de téléaffichage par appel à la fonction DisplayScreenSupervisionFunction</li>
<li>Saisie de la configuration des panneaux dans SYNTHESE par l'administrateur (utilisation des écrans d'administration DisplayAdmin et DisplayScreenCPUAdmin)</li>
<li>Sondages sur l'état des panneaux ou des données par l'ordonnanceur de Nagios par un plug-in Nagios dédié (check_synthese.sh) faisant appel à SYNTHESE par la fonction DisplayGetNagiosStatusFunction</li>
<li>Génération automatique de la configuration de Nagios liée aux panneaux par le service SYNTHESE (utilisation de la fonction CentreonConfigExportFunction)</li>
<li>Génération des fichiers de configuration de Nagios à partir des tables de stockage de MySQL, par l'environnement de Centréon</li>
<li>Stockage des états des panneaux collectés dans la base d'historisation MySQL, par un démon NDO</li>
<li>Sauvegarde de la configuration des alertes automatiques dans la base MySQL par Centréon</li>
<li>Affichage des données temps réel et historiques par Centréon</li>
<li>Envoi d'alerte e-mail en cas d'incident, selon paramétrage, par Nagios</li>
<li>Consultation des données et configuration des alertes sur Centréon par l'administrateur</li>
</ol>

@page archi-interne Architecture interne

SYNTHESE est développé dans une optique de haute performance.

A ce titre, il utilise les technologies libres suivantes, dont l'efficacité reste inégalée à ce jour :
<ul>
<li><b>Code 100% C++</b> : optimisation de la mémoire et rapidité proche du maximum grâce au positionnement bas-niveau du C++</li>
<li><b>Chargement de toutes les données utiles en mémoire vive</b> selon un modèle objet orienté performances de calcul</li>
<li><b>Bibliothèques STL et Boost</b> : basées essentiellement sur des templates, évitent bon nombre de calculs à l'exécution et donc augmentation de la performance. Ces bibliothèques sont standard et sont donc connues de la grande majorité des développeurs C++.</li>
<li><b>Base de données fichier SQLite</b> : l'une des plus rapides du marché, grâce à l'économie du passage par une socket. Permet en outre une synchronisation automatique avec la mémoire vive par l'usage des triggers C.</li>
<li><b>Algorithmes optimisés</b> utilisant les données directement en mémoire vive pour maximiser les performances.</li>
<li><b>Une API XML</b> est disponible pour un contrôle externe de l'application par d'autres serveurs, notamment gérant la couche média de manière déportée</li>
</ul>

Le diagramme suivant indique le fonctionnement général interne du serveur :

@image html archi-interne.png
@image latex archi-interne.png width=10cm
 
SYNTHESE est développé en C++ dans le respect des normes ANSI, ce qui lui permet d'être compilé et de fonctionner sur les plateformes suivantes :
<ul>
<li>Windows</li>
<li>Linux</li>
<li>Mac</li>
</ul>

Quelques points clé à propos de SYNTHESE :
<ul>
<li>Aucune dépendance à bibliothèque non libre</li>
<li>Modularité totale, utilisation d'un framework basé sur des factories permettant le dialogue entre modules ne se « connaissant pas »</li>
<li>Codage respectueux des standards ANSI C++, totalement cross-plateforme (Linux, Windows, Mac) en faisant appel le moins possible à des doubles implémentations</li>
<li>Documentation en ligne et complétée par des pages métier exploitées par Doxygen</li>
<li>Livraison des binaires par packaging deb (sous Linux uniquement) avec installation automatique des dépendances</li>
<li>Compilation par SCons</li>
</ul>

*/