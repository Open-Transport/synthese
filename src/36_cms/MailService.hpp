
//////////////////////////////////////////////////////////////////////////////////////////
///	Mail class header.
///	@file MailService.hpp
///	@author Gael Sauvanet
///	@date 2012
///
///	This file belongs to the SYNTHESE project (public transportation specialized software)
///	Copyright (C) 2002 Hugues Romain - RCSmobility <contact@rcsmobility.com>
///
///	This program is free software; you can redistribute it and/or
///	modify it under the terms of the GNU General Public License
///	as published by the Free Software Foundation; either version 2
///	of the License, or (at your option) any later version.
///
///	This program is distributed in the hope that it will be useful,
///	but WITHOUT ANY WARRANTY; without even the implied warranty of
///	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
///	GNU General Public License for more details.
///
///	You should have received a copy of the GNU General Public License
///	along with this program; if not, write to the Free Software
///	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#ifndef SYNTHESE_MailService_H__
#define SYNTHESE_MailService_H__

#include "FactorableTemplate.h"
#include "Function.h"

namespace synthese
{
	namespace cms
	{
		//////////////////////////////////////////////////////////////////////////
		///	36.15 Function : MailService.
		/// See https://extranet.rcsmobility.com/projects/synthese/wiki/Mail
		//////////////////////////////////////////////////////////////////////////
		///	@ingroup m36Functions refFunctions
		///	@author Gael Sauvanet
		///	@date 2012
		/// @since 3.4.0
		class MailService:
			public util::FactorableTemplate<server::Function,MailService>
		{
		public:
			static const std::string PARAMETER_RECIPIENTS;
			static const std::string PARAMETER_SENDER_MAIL;
			static const std::string PARAMETER_SENDER_NAME;
			static const std::string PARAMETER_SENDER;
			static const std::string PARAMETER_SUBJECT;
			static const std::string PARAMETER_CONTENT;
			static const std::string PARAMETER_HTML;

			static const std::string ATTR_RESULT;

		protected:
			typedef std::vector<std::pair<std::string, std::string> > Recipients;	// pair mail / name

			//! \name parameters
			//@{
				Recipients _recipients;
				std::string _senderMail;
				std::string _senderName;
				std::string _subject;
				std::string _content;
				bool _isHtml;
			//@}


			//////////////////////////////////////////////////////////////////////////
			/// Conversion from attributes to generic parameter maps.
			/// See https://extranet.rcsmobility.com/projects/synthese/wiki/Mail#Request
			//////////////////////////////////////////////////////////////////////////
			///	@return Generated parameters map
			/// @author Gael Sauvanet
			/// @date 2012
			/// @since 3.4.0
			util::ParametersMap _getParametersMap() const;



			//////////////////////////////////////////////////////////////////////////
			/// Conversion from generic parameters map to attributes.
			/// See https://extranet.rcsmobility.com/projects/synthese/wiki/Mail#Request
			//////////////////////////////////////////////////////////////////////////
			///	@param map Parameters map to interpret
			/// @author Gael Sauvanet
			/// @date 2012
			/// @since 3.4.0
			virtual void _setFromParametersMap(
				const util::ParametersMap& map
			);



			//////////////////////////////////////////////////////////////////////////
			/// Serialize Recipients
			/// @param recipients Vector of recipients.
			/// @author Gael Sauvanet
			/// @date 2012
			static std::string serializeRecipients(const Recipients recipients);



			//////////////////////////////////////////////////////////////////////////
			/// Unserialize Recipients string
			/// @param recipientsString the recipients string
			/// @author Gael Sauvanet
			/// @date 2012
			static Recipients unserializeRecipients(const std::string recipientsString);



		public:
			//////////////////////////////////////////////////////////////////////////
			/// Display of the content generated by the function.
			/// @param stream Stream to display the content on.
			/// @param request the current request
			/// @author Gael Sauvanet
			/// @date 2012
			virtual util::ParametersMap run(std::ostream& stream, const server::Request& request) const;



			//////////////////////////////////////////////////////////////////////////
			/// Gets if the function can be run according to the user of the session.
			/// @param session the current session
			/// @return true if the function can be run
			/// @author Gael Sauvanet
			/// @date 2012
			virtual bool isAuthorized(const server::Session* session) const;



			//////////////////////////////////////////////////////////////////////////
			/// Gets the Mime type of the content generated by the function.
			/// @return the Mime type of the content generated by the function
			/// @author Gael Sauvanet
			/// @date 2012
			virtual std::string getOutputMimeType() const;
		};
}	}

#endif // SYNTHESE_MailService_H__

