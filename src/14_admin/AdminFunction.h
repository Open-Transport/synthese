
/** AdminRequest class header.
	@file AdminRequest.h

	This file belongs to the SYNTHESE project (public transportation specialized software)
	Copyright (C) 2002 Hugues Romain - RCS <contact@reseaux-conseil.com>

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

#ifndef SYNTHESE_AdminRequest_H__
#define SYNTHESE_AdminRequest_H__

#include <boost/shared_ptr.hpp>

#include "FactorableTemplate.h"
#include "RequestWithInterface.h"
#include "AdminInterfaceElement.h"

namespace synthese
{
	namespace cms
	{
		class Webpage;
	}

	namespace admin
	{
		class AdminInterfaceElement;
		
		//////////////////////////////////////////////////////////////////////////
		/// 14.15 Function : display of administration console.
		/// Key : admin
		/// Parameters :
		///	<dl>
		///	<dt>rub</dt><dd>key of the admin compound to display (member of the AdminInterfaceElement factory)</dd>
		/// <dt>afp</dt><dd>key of the admin compound to display if an action was launched and was unsuccesful (optional : the default value is to display the same compound)</dd>
		/// <dt>tab</dt><dd>key of the tab to display at the page opening (see tab definitions of the displayed admin compund) (optional : the default value is to display the first tab)</dd>
		/// <dt>aft</dt><dd>key of the tab to display at the page opening if an action was launched and was unsuccessful (see tab definitions of the displayed admin compund in case of unsuccessful action) (optional : the default value is to display the first tab)</dd>
		/// <dt>mt</dt><dd>id of the CMS template to use to display the page.  (optional : if undefined, the code generated by the admin compound is directly streamed, encapsulated in a html / body tags sequence). The template will become the parameters produced by AdminFunction::Display</dd>
		/// <dt>pt</dt><dd>id of the CMS template to use to display each element of the page position description (optional : if undefined, the page position is not generated). The template will become the parameter produced by AdminFunction::_displayAdminPosElement.</dd>
		/// <dt>tt</dt><dd>id of the CMS template to use to display each node of the tree (optional : if undefined, the tree is not generated). The template will become the parameter produced by AdminFunction::_displayAdminTreeNode.</dd>
		/// </dl>
		/// Other parameters : the admin compound can read parameters from the request. The parameters map is forwarded to the admin compound at the load of the object. See each admin compound documentation for more informations about specific parameters.
		//////////////////////////////////////////////////////////////////////////
		///	@ingroup m14Functions refFunctions
		///	@warning Must be linked to the Request by AdminRequest or its subclasses.
		/// @author Hugues Romain
		class AdminFunction:
			public util::FactorableTemplate<server::Function, AdminFunction>
		{
		public:
			static const std::string PARAMETER_PAGE;
			static const std::string PARAMETER_TAB;
			static const std::string PARAMETER_ACTION_FAILED_PAGE;
			static const std::string PARAMETER_ACTION_FAILED_TAB;
			static const std::string PARAMETER_MAIN_CMS_TEMPLATE;
			static const std::string PARAMETER_POSITION_ELEMENT_CMS_TEMPLATE;
			static const std::string PARAMETER_TREE_ELEMENT_CMS_TEMPLATE;
			
		protected:
			//! \name Page parameters
			//@{
				boost::shared_ptr<AdminInterfaceElement>	_page;
				boost::shared_ptr<AdminInterfaceElement>	_actionFailedPage;
				boost::optional<std::string>	_errorMessage;
			//@}

			//! @name CMS templates
			//@{
				boost::shared_ptr<const cms::Webpage> _mainTemplate;
				boost::shared_ptr<const cms::Webpage> _positionElementTemplate;
				boost::shared_ptr<const cms::Webpage> _treeNodeTemplate;
			//@}


			/** Conversion from generic parameters map to attributes.
			*/
			void _setFromParametersMap(const server::ParametersMap& map);

			/** Conversion from attributes to generic parameter maps.
			*/
			server::ParametersMap _getParametersMap() const;

			/** Action to run, defined by each subclass.
			*/
			void run(std::ostream& stream, const server::Request& request) const;

			virtual bool isAuthorized(const server::Session* session) const;

		public:
		
			//! @name Getters
			//@{
				boost::shared_ptr<AdminInterfaceElement> getPage() const { return _page; }
				boost::shared_ptr<AdminInterfaceElement> getActionFailedPage() const { return _actionFailedPage; }
			//@}
			
			//! @name Setters
			//@{
				void setPage(boost::shared_ptr<AdminInterfaceElement> aie){ _page = aie; }
				void setActionFailedPage(boost::shared_ptr<AdminInterfaceElement> aie){ _actionFailedPage = aie; }
	
				template<class T>
				void setActionFailedPage() { _actionFailedPage = _page->getNewOtherPage<T>(); }
			//@}

			virtual void _copy(boost::shared_ptr<const Function> function);

			virtual std::string getOutputMimeType() const;

		private:
			static const std::string DATA_USER_FULL_NAME;
			static const std::string DATA_ERROR_MESSAGE;
			static const std::string DATA_TREE;
			static const std::string DATA_POSITION;
			static const std::string DATA_TABS;
			static const std::string DATA_CONTENT;
			static const std::string DATA_LOGOUT_URL;
			static const std::string DATA_VERSION;

			//////////////////////////////////////////////////////////////////////////
			/// Display of the admin compound by a CMS template.
			/// Parameters sent to the CMS template :
			/// <dl>
			/// <dt>user_full_name</dt><dd>User full name (empty = no user logged)</dd>
			///	<dt>error_message</dt><dd>error message</dd>
			///	<dt>tree</dt><dd>admin tree</dd>
			///	<dt>position</dt><dd>admin position</dd>
			///	<dt>tabs</dt><dd>admin tabs code</dd>
			///	<dt>content</dt><dd>admin content</dd>
			///	<dt>logout_url</dt><dd>logout url</dd>
			/// <dt>icon</dt><dd>icon of the page</dd>
			/// <dt>title</dt><dd>title of the page</dd>
			/// <dt>version</dt><dd>version of SYNTHESE</dd>
			/// </dl>
			//////////////////////////////////////////////////////////////////////////
			/// @param stream stream to write the result on
			///	@param request Source request
			/// @param compound Compound to display
			/// @param errorMessage Error message
			///	@author Hugues Romain
			///	@date 2010
			/// @since 3.2.0
			void _display(
				std::ostream& stream,
				const server::Request& request,
				boost::shared_ptr<const AdminInterfaceElement> compound,
				boost::optional<std::string> errorMessage
			) const;


			static const std::string DATA_ICON;
			static const std::string DATA_TITLE;
			static const std::string DATA_URL;


			//////////////////////////////////////////////////////////////////////////
			/// Admin page CMS exporter.
			/// Values sent to the CMS template :
			/// <dl>
			/// <dt>icon</dt><dd>icon of the compound</dd>
			/// <dt>title</dt><dd>title of the compound</dd>
			/// </dl>
			//////////////////////////////////////////////////////////////////////////
			/// @param pm parameters map to populate
			/// @param request request which called the display
			/// @param compound admin compound to export
			/// @param prefix prefix to add to the field names
			/// @author Hugues Romain
			/// @since 3.2.0
			/// @date 2010
			static void ExportAdminCompound(
				server::ParametersMap& pm,
				const server::Request& request,
				boost::shared_ptr<const AdminInterfaceElement> compound,
				std::string prefix = std::string()
			);


			static const std::string DATA_DEPTH;
			static const std::string DATA_IS_LAST;

			//////////////////////////////////////////////////////////////////////////
			/// Displays an element of the position string through a CMS template.
			/// Values sent to the template :
			/// <dl>
			/// <dt>depth</dt><dd>Depth of the element in the tree</dd>
			/// <dt>is_last</dt><dd>The element is the current compound (last of the serie)</dd>
			/// <dt>icon</dt><dd>icon of the compound</dd>
			/// <dt>title</dt><dd>title of the compound</dd>
			/// </dl>
			void _displayAdminPosElement(
				std::ostream& stream,
				const server::Request& request,
				boost::shared_ptr<const AdminInterfaceElement> link,
				std::size_t depth,
				bool isLast
			) const;


			static const std::string DATA_SUBTREE;
			static const std::string DATA_IS_OPENED;
			static const std::string DATA_IS_CURRENT;

			//////////////////////////////////////////////////////////////////////////
			/// Displays an element of the position string through a CMS template.
			/// Values sent to the template :
			/// <dl>
			/// <dt>icon</dt><dd>icon of the compound</dd>
			/// <dt>title</dt><dd>title of the compound</dd>
			/// <dt>subtree</dt><dd>subtree content</dd>
			/// <dt>is_opened</dt><dd>1|0 the node is opened</dd>
			/// <dt>is_last</dt><dd>1|0 the node is the last one of its serie</dd>
			/// <dt>is_current</dt><dd>1|0 the node corresponds to the currently displayed compound</dd>
			/// </dl>
			void _displayAdminTreeNode(
				std::ostream& stream,
				const server::Request& request,
				const AdminInterfaceElement::PageLinksTree& tree,
				boost::shared_ptr<const AdminInterfaceElement> currentCompound,
				std::size_t depth,
				bool isLast
			) const;
		};
	}
}
#endif // SYNTHESE_AdminRequest_H__
