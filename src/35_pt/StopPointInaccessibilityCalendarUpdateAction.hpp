
/** StopPointInaccessibilityCalendarUpdateAction class header.
	@file StopPointInaccessibilityCalendarUpdateAction.hpp

	This file belongs to the SYNTHESE project (public transportation specialized software)
	Copyright (C) 2002 Hugues Romain - RCSmobility <contact@rcsmobility.com>

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

#ifndef SYNTHESE_StopPointInaccessibilityCalendarUpdateAction_H__
#define SYNTHESE_StopPointInaccessibilityCalendarUpdateAction_H__

#include "Action.h"
#include "FactorableTemplate.h"
#include "GraphTypes.h"
#include "ImportableTemplate.hpp"

namespace synthese
{
	namespace calendar
	{
		class CalendarTemplate;
	}

	namespace pt
	{
		class StopPoint;
		class StopPointInaccessibilityCalendar;

		class StopPointInaccessibilityCalendarUpdateAction:
			public util::FactorableTemplate<server::Action, StopPointInaccessibilityCalendarUpdateAction>
		{
		public:
			typedef std::vector<boost::gregorian::date_period> DatePeriods;

			static const std::string PARAMETER_ID;
			static const std::string PARAMETER_DATA_SOURCE_LINKS;
			static const std::string PARAMETER_STOP_POINT_ID;
			static const std::string PARAMETER_USER_CLASS;
			static const std::string PARAMETER_CALENDAR_TEMPLATE_ID;
			static const std::string PARAMETER_PARENT_CALENDAR_TEMPLATE_ID;
			static const std::string PARAMETER_START_HOUR;
			static const std::string PARAMETER_END_HOUR;
			static const std::string PARAMETER_SERIALIZED_DATE_PERIODS;
			static const std::string PARAMETER_DAILY_TIME_FILTER;
			static const std::string PARAMETER_CLEAN_CALENDAR_BEFORE_UPDATE;
			static const std::string PARAMETER_ALLOW_AUTO_CREATION;

			static const std::string PERIODS_SEPARATOR;
			static const std::string DATE_SEPARATOR;
			static const std::string AUTOGENERATED_SUFFIX_NAME;

		private:
			boost::shared_ptr<StopPointInaccessibilityCalendar> _stopPointInaccessibilityCalendar;
			impex::Importable::DataSourceLinks _dataSourceLinks;
			boost::shared_ptr<StopPoint> _stopPoint;
			boost::optional<graph::UserClassCode> _userClass;
			boost::shared_ptr<calendar::CalendarTemplate> _calendarTemplate;
			boost::shared_ptr<calendar::CalendarTemplate> _parentCalendarTemplate;
			boost::optional<boost::posix_time::time_duration> _startHour;
			boost::optional<boost::posix_time::time_duration> _endHour;
			DatePeriods _datePeriods;
			boost::optional<bool> _dailyTimeFilter;
			boost::optional<bool> _cleanCalendarBeforeUpdate;

		protected:
			util::ParametersMap getParametersMap() const;

			void _setFromParametersMap(const util::ParametersMap& map);

		public:
			StopPointInaccessibilityCalendarUpdateAction();

			void setStopPointInaccessibilityCalendar(const boost::shared_ptr<StopPointInaccessibilityCalendar>& stopPointInaccessibilityCalendar){
				_stopPointInaccessibilityCalendar = stopPointInaccessibilityCalendar;
			}
			void setDataSourceLinks(const impex::Importable::DataSourceLinks& dataSourceLinks){ _dataSourceLinks = dataSourceLinks; }
			void setStopPoint(const boost::shared_ptr<StopPoint>& stopPoint){ _stopPoint = stopPoint; }
			void setUserClass(const graph::UserClassCode& userClass){ _userClass = userClass; }
			void setCalendarTemplate(const boost::shared_ptr<calendar::CalendarTemplate>& calendarTemplate){ _calendarTemplate = calendarTemplate; }
			void setStartHour(const boost::posix_time::time_duration& startHour){ _startHour = startHour; }
			void setEndHour(const boost::posix_time::time_duration& endHour){ _endHour = endHour; }
			void setDatePeriods(const DatePeriods& datePeriods){ _datePeriods = datePeriods; }
			void setDailyTimeFilter(bool dailyTimeFilter){ _dailyTimeFilter = dailyTimeFilter; }
			void setCleanCalendarBeforeUpdate(bool cleanCalendarBeforeUpdate){ _cleanCalendarBeforeUpdate = cleanCalendarBeforeUpdate; }



			void run(server::Request& request);

			virtual bool isAuthorized(const server::Session* session) const;




			static DatePeriods unserializeDatePeriods(const std::string& serializedString);

			static std::string serializeDatePeriods(const DatePeriods& datePeriods);
		};
	}
}

#endif // SYNTHESE_StopPointInaccessibilityCalendarUpdateAction_H__
