
//////////////////////////////////////////////////////////////////////////////////////////
/// StripTagsFunction class header.
///	@file StripTagsFunction.hpp
///	@date 2013
///
///	This file belongs to the SYNTHESE project (public transportation specialized software)
///	Copyright (C) 2002 Hugues Romain - RCSmobility <contact@rcsmobility.com>
///
///	This program is free software; you can redistribute it and/or
///	modify it under the terms of the GNU General Public License
///	as published by the Free Software Foundation; either version 2
///	of the License, or (at your option) any later version.
///
///	This program is distributed in the hope that it will be useful,
///	but WITHOUT ANY WARRANTY; without even the implied warranty of
///	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
///	GNU General Public License for more details.
///
///	You should have received a copy of the GNU General Public License
///	along with this program; if not, write to the Free Software
///	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#ifndef SYNTHESE_StripTagsFunction_H__
#define SYNTHESE_StripTagsFunction_H__

#include "FactorableTemplate.h"
#include "Function.h"

namespace synthese
{
	namespace cms
	{
		struct TranslateHTMLChars {
			typedef std::vector<std::pair<std::string, std::string> > HTMLChars;
			HTMLChars _htmlchars;

			TranslateHTMLChars() : _htmlchars()
			{
				_htmlchars.push_back(HTMLChars::value_type("nbsp"," "));
				_htmlchars.push_back(HTMLChars::value_type("eacute","é"));
				_htmlchars.push_back(HTMLChars::value_type("egrave","è"));
				_htmlchars.push_back(HTMLChars::value_type("agrave","à"));
				_htmlchars.push_back(HTMLChars::value_type("ugrave","ù"));
				_htmlchars.push_back(HTMLChars::value_type("lt","<"));
				_htmlchars.push_back(HTMLChars::value_type("gt",">"));
				_htmlchars.push_back(HTMLChars::value_type("#39","'"));
				_htmlchars.push_back(HTMLChars::value_type("#34","\""));
				_htmlchars.push_back(HTMLChars::value_type("quot","\""));
				_htmlchars.push_back(HTMLChars::value_type("#38","&"));
				_htmlchars.push_back(HTMLChars::value_type("amp","&"));
				_htmlchars.push_back(HTMLChars::value_type("ocirc","ô"));
				_htmlchars.push_back(HTMLChars::value_type("ecirc","ê"));
				_htmlchars.push_back(HTMLChars::value_type("iuml","ï"));
				_htmlchars.push_back(HTMLChars::value_type("euml","ë"));
				_htmlchars.push_back(HTMLChars::value_type("laquo","«"));
				_htmlchars.push_back(HTMLChars::value_type("raquo","»"));
				_htmlchars.push_back(HTMLChars::value_type("rsquo","’"));
				_htmlchars.push_back(HTMLChars::value_type("lsquo","‘"));
				_htmlchars.push_back(HTMLChars::value_type("rdquo","”"));
				_htmlchars.push_back(HTMLChars::value_type("ldquo","“"));
				_htmlchars.push_back(HTMLChars::value_type("Eacute","É"));
				_htmlchars.push_back(HTMLChars::value_type("eacute","È"));
				_htmlchars.push_back(HTMLChars::value_type("eacute","Ê"));
				_htmlchars.push_back(HTMLChars::value_type("eacute","Ë"));
				_htmlchars.push_back(HTMLChars::value_type("eacute","Ï"));
				_htmlchars.push_back(HTMLChars::value_type("eacute","À"));
				_htmlchars.push_back(HTMLChars::value_type("eacute","Ô"));
				_htmlchars.push_back(HTMLChars::value_type("eacute","Ù"));
			}
		};

		//////////////////////////////////////////////////////////////////////////
		///	36.15 Function : StripTagsFunction.
		/// See https://extranet.rcsmobility.com/projects/synthese/wiki/String_manipulation#Substring
		//////////////////////////////////////////////////////////////////////////
		///	@ingroup m56Functions refFunctions
		///	@date 2013
		class StripTagsFunction:
			public util::FactorableTemplate<server::Function,StripTagsFunction>
		{
		public:
			static const std::string PARAMETER_TEXT;
			static const std::string PARAMETER_CODE;

		protected:
			/// Parameters
			std::string _text;
			bool _decode;
			static const TranslateHTMLChars HTML_CHARS;
			static const int MAX_CODE_LENGTH;

			//////////////////////////////////////////////////////////////////////////
			/// Conversion from attributes to generic parameter maps.
			///	@return Generated parameters map
			util::ParametersMap _getParametersMap() const;



			//////////////////////////////////////////////////////////////////////////
			/// Conversion from generic parameters map to attributes.
			///	@param map Parameters map to interpret
			virtual void _setFromParametersMap(
				const util::ParametersMap& map
			);

			
			//////////////////////////////////////////////////////////////////////////
			/// Decode encoded string
			/// @param todecode std::string to decode
			std::string urlDecode(std::string &todecode);

		public:
			//////////////////////////////////////////////////////////////////////////
			/// Display of the content generated by the function.
			/// @param stream Stream to display the content on.
			/// @param request the current request
			virtual util::ParametersMap run(std::ostream& stream, const server::Request& request) const;



			//////////////////////////////////////////////////////////////////////////
			/// Gets if the function can be run according to the user of the session.
			/// @param session the current session
			/// @return true if the function can be run
			virtual bool isAuthorized(const server::Session* session) const;



			//////////////////////////////////////////////////////////////////////////
			/// Gets the Mime type of the content generated by the function.
			/// @return the Mime type of the content generated by the function
			virtual std::string getOutputMimeType() const;
		};
	}
}

#endif // SYNTHESE_StripTagsFunction_H__
