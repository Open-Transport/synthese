
//////////////////////////////////////////////////////////////////////////////////////////
/// WFSService class header.
///	@file WFSService.hpp
///	@author RCSobility
///	@date 2010
///
///	This file belongs to the SYNTHESE project (public transportation specialized software)
///	Copyright (C) 2002 Hugues Romain - RCS <contact@reseaux-conseil.com>
///
///	This program is free software; you can redistribute it and/or
///	modify it under the terms of the GNU General Public License
///	as published by the Free Software Foundation; either version 2
///	of the License, or (at your option) any later version.
///
///	This program is distributed in the hope that it will be useful,
///	but WITHOUT ANY WARRANTY; without even the implied warranty of
///	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
///	GNU General Public License for more details.
///
///	You should have received a copy of the GNU General Public License
///	along with this program; if not, write to the Free Software
///	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#ifndef SYNTHESE_WFSService_H__
#define SYNTHESE_WFSService_H__

#include "FactorableTemplate.h"
#include "Function.h"

#include <vector>
#include <geos/geom/Envelope.h>

namespace synthese
{
	class CoordinatesSystem;

	namespace map
	{
		class WFSType;

		//////////////////////////////////////////////////////////////////////////
		///	39.15 Function : WFSService.
		/// See https://extranet-rcsmobility.com/projects/synthese/wiki/https://extranet-rcsmobility.com/projects/synthese/wiki/WFS
		//////////////////////////////////////////////////////////////////////////
		///	@ingroup m39Functions refFunctions
		///	@author RCSobility
		///	@date 2010
		/// @since 3.2.1
		class WFSService:
			public util::FactorableTemplate<server::Function,WFSService>
		{
		public:
			static const std::string PARAMETER_VERSION;
			static const std::string VALUE_VERSION_1_1_0;

			static const std::string PARAMETER_REQUEST;
			static const std::string VALUE_REQUEST_GetFeature;
			static const std::string VALUE_REQUEST_GetCapabilities;
			static const std::string VALUE_REQUEST_DescribeFeatureType;

			static const std::string PARAMETER_OUTPUTFORMAT;
			static const std::string VALUE_OUTPUTFORMAT_GML_3_1_1;

			static const std::string PARAMETER_RESULTTYPE;
			static const std::string VALUE_RESULTTYPE_RESULTS;
			static const std::string VALUE_RESULTTYPE_HITS;

			static const std::string PARAMETER_SRSNAME;

			static const std::string PARAMETER_TYPENAME;

			static const std::string PARAMETER_BBOX;

		protected:
			//! \name Page parameters
			//@{
				std::string _version;
				std::string _request;
				std::string _outputFormat;
				bool _outputResults;
				const CoordinatesSystem* _srs;
				std::vector<boost::shared_ptr<WFSType> > _types;
				boost::optional<geos::geom::Envelope> _envelope; // In WGS84
			//@}


			//////////////////////////////////////////////////////////////////////////
			/// Conversion from attributes to generic parameter maps.
			/// See https://extranet-rcsmobility.com/projects/synthese/wiki/https://extranet-rcsmobility.com/projects/synthese/wiki/WFS#Request
			//////////////////////////////////////////////////////////////////////////
			///	@return Generated parameters map
			/// @author RCSobility
			/// @date 2010
			/// @since 3.2.1
			server::ParametersMap _getParametersMap() const;



			//////////////////////////////////////////////////////////////////////////
			/// Conversion from generic parameters map to attributes.
			/// See https://extranet-rcsmobility.com/projects/synthese/wiki/https://extranet-rcsmobility.com/projects/synthese/wiki/WFS#Request
			//////////////////////////////////////////////////////////////////////////
			///	@param map Parameters map to interpret
			/// @author RCSobility
			/// @date 2010
			/// @since 3.2.1
			virtual void _setFromParametersMap(
				const server::ParametersMap& map
			);


		public:
			WFSService();

			//! @name Setters
			//@{
			//	void setObject(boost::shared_ptr<const Object> value) { _object = value; }
			//@}



			//////////////////////////////////////////////////////////////////////////
			/// Display of the content generated by the function.
			/// @param stream Stream to display the content on.
			/// @param request the current request
			/// @author RCSobility
			/// @date 2010
			virtual void run(std::ostream& stream, const server::Request& request) const;



			//////////////////////////////////////////////////////////////////////////
			/// Gets if the function can be run according to the user of the session.
			/// @param session the current session
			/// @return true if the function can be run
			/// @author RCSobility
			/// @date 2010
			virtual bool isAuthorized(const server::Session* session) const;



			//////////////////////////////////////////////////////////////////////////
			/// Gets the Mime type of the content generated by the function.
			/// @return the Mime type of the content generated by the function
			/// @author RCSobility
			/// @date 2010
			virtual std::string getOutputMimeType() const;
		};
	}
}

#endif // SYNTHESE_WFSService_H__
