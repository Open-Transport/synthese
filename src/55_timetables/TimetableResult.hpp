
/** TimetableResult class header.
	@file TimetableResult.hpp

	This file belongs to the SYNTHESE project (public transportation specialized software)
	Copyright (C) 2002 Hugues Romain - RCSmobility <contact@rcsmobility.com>

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

#ifndef SYNTHESE_timetables_TimetableResult_hpp__
#define SYNTHESE_timetables_TimetableResult_hpp__

#include "TimetableColumn.h"
#include "TimetableWarning.h"

#include <vector>
#include <map>
#include <boost/date_time/time_duration.hpp>

namespace synthese
{
	namespace pt
	{
		class CommercialLine;
		class RollingStock;
		class SchedulesBasedService;
	}

	namespace timetables
	{
		//////////////////////////////////////////////////////////////////////////
		/// Timetable result generated by TimetableGenerator.
		///	@ingroup m55
		/// @author Hugues Romain
		/// @date 2010
		/// @since 3.1.16
		///
		/// Historically, the content of this class was included in TimetableGenerator.
		class TimetableResult
		{
		public:
			typedef std::vector<TimetableColumn>			Columns;
			typedef std::map<std::size_t, boost::shared_ptr<TimetableWarning> >		Warnings;
			typedef std::vector<pt::CommercialLine*> RowLinesVector;
			typedef std::vector<TimetableColumn::Services> RowServicesVector;
			typedef std::vector<boost::shared_ptr<TimetableWarning> > RowNotesVector;
			typedef std::vector<const pt::RollingStock*> RowRollingStockVector;
			typedef std::vector<TimetableColumn::Content::value_type> RowTimesVector;
			typedef std::vector<TimetableColumn::tTypeOD>	RowTypeODVector;


		private:
			boost::shared_ptr<TimetableResult>	_beforeTransfers;
			boost::shared_ptr<TimetableResult>	_afterTransfers;
			Columns			_columns;
			boost::shared_ptr<Warnings>		_warnings;

		public:
			TimetableResult(boost::shared_ptr<Warnings> warnings);

			//! @name Getters
			//@{
				const Warnings&	getWarnings()	const { return *_warnings; }
				Warnings&	getWarnings()	{ return *_warnings; }
				const Columns&	getColumns()	const { return _columns; }
				Columns&	getColumns()	{ return _columns; }
			//@}

			//! @name Modifiers
			//@{
				void createBeforeTransfer();
				void createAfterTransfer();
			//@}

			//! @name Services
			//@{
				RowTimesVector			getRowSchedules(size_t rank)	const;
				bool					hasSchedules(size_t rank) const;
				RowLinesVector			getRowLines()								const;
				RowServicesVector		getRowServices()							const;
				RowNotesVector			getRowNotes()								const;
				RowRollingStockVector	getRowRollingStock()						const;
				RowTypeODVector			getOriginTypes()							const;
				RowTypeODVector			getDestinationTypes()						const;

				///
				const TimetableResult&	getBeforeTransferTimetable(std::size_t depth) const;
				TimetableResult&	getBeforeTransferTimetable(std::size_t depth);
				const TimetableResult&	getAfterTransferTimetable(std::size_t depth) const;
				TimetableResult&	getAfterTransferTimetable(std::size_t depth);
			//@}

		};
}	}

#endif // SYNTHESE_timetables_TimetableResult_hpp__
