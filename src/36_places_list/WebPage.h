
/** WebPage class header.
	@file WebPage.h

	This file belongs to the SYNTHESE project (public transportation specialized software)
	Copyright (C) 2002 Hugues Romain - RCS <contact@reseaux-conseil.com>

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

#ifndef SYNTHESE_transportwebsite_WebPage_h__
#define SYNTHESE_transportwebsite_WebPage_h__

#include "Registrable.h"
#include "Registry.h"
#include "TreeNode.hpp"
#include "TreeRankOrderingPolicy.hpp"
#include "TreeOtherClassRootPolicy.hpp"
#include "Named.h"
#include "Site.h"

#include <ostream>
#include <boost/date_time/posix_time/ptime.hpp>

namespace synthese
{
	namespace server
	{
		class Request;
	}

	namespace transportwebsite
	{
		/** Web page class (CMS).
			@ingroup m56
		*/
		class WebPage:
			public util::Registrable,
			public tree::TreeNode<
				WebPage,
				tree::TreeRankOrderingPolicy,
				tree::TreeOtherClassRootPolicy<Site>
			>,
			public util::Named
		{
		public:
			/// Chosen registry class.
			typedef util::Registry<WebPage>	Registry;

		private:
			std::string _content1;
			std::string _include1;
			std::string _content2;
			std::string _include2;
			std::string _content3;
			boost::posix_time::ptime _startDate;
			boost::posix_time::ptime _endDate;

		public:
			WebPage(util::RegistryKeyType id = UNKNOWN_VALUE);

			//! @name Getters
			//@{
				const std::string& getContent1() const;
				const std::string& getInclude1() const;
				const std::string& getContent2() const;
				const std::string& getInclude2() const;
				const std::string& getContent3() const;
				const boost::posix_time::ptime& getStartDate() const;
				const boost::posix_time::ptime& getEndDate() const;
			//@}

			//! @name Setters
			//@{
				void setContent1(const std::string& value);
				void setInclude1(const std::string& value);
				void setContent2(const std::string& value);
				void setInclude2(const std::string& value);
				void setContent3(const std::string& value);
				void setStartDate(const boost::posix_time::ptime& value);
				void setEndDate(const boost::posix_time::ptime& value);
			//@}

			//! @name Services
			//@{
				//////////////////////////////////////////////////////////////////////////
				/// Tests if the page must be displayed according to the current time.
				/// @param now the current time (default = now)
				/// @return true if the page must be displayed
				/// @author Hugues Romain
				/// @date 2010
				bool mustBeDisplayed(boost::posix_time::ptime now = boost::posix_time::second_clock::local_time()) const;



				//////////////////////////////////////////////////////////////////////////
				/// Displays the content generated by the function specified by a Request string.
				/// @param stream stream to write on
				/// @param includeString Request string (provided by _includeX attributes)
				/// @param request current request
				/// @author Hugues Romain
				/// @date 2010
				static void DisplayInclude(
					std::ostream& stream,
					const std::string& includeString,
					const server::Request& request
				);
			//@}
		};
	}
}

#endif // SYNTHESE_transportwebsite_WebPage_h__
