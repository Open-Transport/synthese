Import ('env')

## GEOS ##########################################################################################################################
## http://trac.osgeo.org/geos/

senv = env.Clone ()

class GeosProject (CppLibProject):
	def declare(self):
		self.env.InstallAs('#3rd/dev/geos/src/headers/geos/platform.h','#3rd/dev/geos/patch/headers/geos/platform.h')
		self.env.InstallAs('#3rd/dev/geos/src/headers/geos/platform.h.in','#3rd/dev/geos/patch/headers/geos/platform.h.in')
		self.env.InstallAs('#3rd/dev/geos/src/headers/geos/version.h','#3rd/dev/geos/patch/headers/geos/version.h')

		CppLibProject.declare(self)


sources = senv.Glob ('*.cpp', ['examples'], senv.SrcDir('src'), prefix='src/', recursive=True)
sources.remove('src/geom/GeometryFactory.cpp')
sources.remove('src/io/WKBReader.cpp')
sources.remove('src/operation/distance/DistanceOp.cpp')
sources.extend(senv.Glob ('*.cpp', ['examples'], senv.SrcDir('patch'), prefix='patch/', recursive=True))

GeosProject(
	env
	, 'geos'
	, '3.2.patch1b'
	, source_files = sources
	, include_dir = senv.SrcDir('src/headers')
	, filesrootdir = senv.SrcDir('src')
)


class GeosCProject (CppLibProject):
	def declare(self):
		self.env.InstallAs('#3rd/dev/geos/capi/geos_c.h','#3rd/dev/geos/capi/geos_c.h.in')

		CppLibProject.declare(self)

GeosCProject(
	env,
	'geosc',
	'3.2.patch1b',
	source_files = senv.Glob ('*.cpp', [], senv.SrcDir('capi'), prefix='capi/', recursive=True),
	include_dir = senv.SrcDir('capi'),
	filesrootdir = senv.SrcDir('capi'),
	dependencies = ['geos.cpplib']
)
