# 2.8.4 is required because of this issue: http://public.kitware.com/Bug/view.php?id=10356
cmake_minimum_required(VERSION 2.8.4)


# Version:
set(VERSION_MAJOR 3)
set(VERSION_MINOR 3)
set(VERSION_REV 0)
set(SYNTHESE_VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_REV}")

# See http://www.cmake.org/Wiki/CMake_FAQ#Make_Override_Files
# TODO: Maybe use shared libraries and remove this.
set(CMAKE_USER_MAKE_RULES_OVERRIDE
  ${CMAKE_CURRENT_SOURCE_DIR}/c_flag_overrides.cmake)
set(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX
  ${CMAKE_CURRENT_SOURCE_DIR}/cxx_flag_overrides.cmake)

project(synthese3)

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
include(cmake/MacroOptionalFindPackage.cmake)

# Build shared library on Linux.
# On Windows, building DLLs is more involving and won't work as of now
# (see http://www.itk.org/Wiki/BuildingWinDLL)
if(UNIX)
  set(BUILD_SHARED_LIBS ON)
endif()

# Boost

set(Boost_ADDITIONAL_VERSIONS "1.39" "1.42")
# Uncomment to enable debugging output when finding Boost.
#set(Boost_DEBUG ON)

if(WIN32)
  set(Boost_USE_STATIC_LIBS ON)
  set(Boost_USE_STATIC_RUNTIME ON)
else()
  add_definitions(-DBOOST_ALL_DYN_LINK)
endif()

add_definitions(-DFUSION_MAX_VECTOR_SIZE=30)
add_definitions(-DFUSION_MAX_MAP_SIZE=30)

if(NOT DEFINED BOOST_VERSION)
  set(BOOST_VERSION 1.39)
endif()

set(BOOST_LIBS program_options filesystem system regex thread date_time iostreams unit_test_framework)
if(WIN32)
  list(APPEND BOOST_LIBS bzip2)
  list(APPEND BOOST_LIBS zlib)
endif()

if(NOT $ENV{BOOST_ROOT} STREQUAL "")
  set(Boost_NO_SYSTEM_PATHS ON)
endif()
find_package(Boost ${BOOST_VERSION} COMPONENTS ${BOOST_LIBS})
if(NOT Boost_FOUND)
  message(FATAL_ERROR "Boost not found")
endif()

include_directories(${Boost_INCLUDE_DIRS})

# MySQL

macro_optional_find_package(MySQL)
if(WITH_MYSQL AND NOT MYSQL_FOUND)
  message(FATAL_ERROR "MySQL not found")
endif()
if(WITH_MYSQL)
  add_definitions(-DWITH_MYSQL)
endif(WITH_MYSQL)

# Curl is used in the mysql UDF library and the s3-proxy.
include(FindCURL)
# TODO: win32 support not implemented yet.
if(NOT CURL_FOUND AND NOT WIN32)
  message(FATAL_ERROR "CURL library/headers not found")
endif()
if(CURL_FOUND)
  add_definitions(-DHAVE_CURL)
endif()

if(WIN32)
  # NOTE: _MBCS WIN32 _WINDOWS are already set by cmake
  # TODO: should these defines be set (they are with scons)?:
  # -D_USE_MATH_DEFINES
  # -D__WIN32__
  add_definitions(-DNOMINMAX)

  add_definitions(-D_WIN32_WINNT=0x0501)

  # This is to avoid:
  # fatal error C1128: number of sections exceeded object file format limit : compile with /bigobj
  add_definitions(/bigobj)

  # This is to avoid:
  # warning C4290: C++ exception specification ignored except to indicate a function is not __declspec(nothrow)
  add_definitions(/wd4290)

  # This is to avoid:
  # warning C4996: warning C4996: 'std::copy': Function call with parameters that may be unsafe
  add_definitions(/wd4996)

  # This is to avoid:
  # warning C4503: decorated name length exceeded, name was truncated
  add_definitions(/wd4503)

  # This is to avoid:
  # warning C4250: 'xxx' : inherits 'yyy' via dominance
  add_definitions(/wd4250)
  
  # To prevent "LINK : fatal error LNK1210: exceeded internal ILK size limit; link with /INCREMENTAL:NO"
  SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "/INCREMENTAL:NO")
  SET(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "/INCREMENTAL:NO")

  # iconv
  add_library(iconv STATIC IMPORTED)
  set_property(TARGET iconv PROPERTY IMPORTED_LOCATION
    "${PROJECT_SOURCE_DIR}/3rd/dev/iconv/lib/libiconv.lib")

  # expat
  add_definitions(-DXML_STATIC)

endif()

if(CMAKE_BUILD_TYPE STREQUAL Debug)
  add_definitions(-D_DEBUG)
endif()

# gcc warning settings
if (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  add_definitions(-Wall -Wextra -Wno-unused-parameter)
endif ()

# Version info.

set(SYNTHESE_VERSION_INFO "${SYNTHESE_VERSION}")
if (NOT WIN32)
  # TODO: not adding svn revision on Windows. It expects a native svn, and fails
  # if Cygwin svn is found instead.
  find_package(Subversion)
  if (SUBVERSION_FOUND)
    Subversion_WC_INFO(${PROJECT_SOURCE_DIR} Synthese)
    set(SYNTHESE_VERSION_INFO "${SYNTHESE_VERSION_INFO} r${Synthese_WC_REVISION}")
  endif (SUBVERSION_FOUND)

  exec_program("date"
    ARGS "'+%Y%m%d %H:%M'"
    OUTPUT_VARIABLE DATE)
  set(SYNTHESE_VERSION_INFO "${SYNTHESE_VERSION_INFO} (built on ${DATE})")
endif (NOT WIN32)

# Note: this is using a .h file and not defines, otherwise everything gets
# rebuilt each time CMake is invoked.
configure_file(
  "${PROJECT_SOURCE_DIR}/src/15_server/version.h.in"
  "${PROJECT_BINARY_DIR}/src/15_server/version.h"
)


include(FindPythonInterp)
if(NOT PYTHONINTERP_FOUND)
  message(FATAL_ERROR "No Python interpreter found. Cannot continue.")
endif()

enable_testing()

# See http://www.vtk.org/Wiki/CMake_RPATH_handling#Always_full_RPATH
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
# the RPATH to be used when installing, but only if it's not a system directory
LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
IF("${isSystemDir}" STREQUAL "-1")
  SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
ENDIF("${isSystemDir}" STREQUAL "-1")

# Global variables.
include(global_vars.cmake)

add_subdirectory(3rd)
add_subdirectory(src)
add_subdirectory(packages)
add_subdirectory(projects)
add_subdirectory(tools)
add_subdirectory(test)
add_subdirectory(utils)

# build a CPack driven installer package
#include(InstallRequiredSystemLibraries)
#set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/License.txt")
set(CPACK_PACKAGE_VERSION_MAJOR VERSION_MAJOR)
set(CPACK_PACKAGE_VERSION_MINOR VERSION_MINOR)
set(CPACK_PACKAGE_VERSION_PATCH VERSION_REV)
set(CPACK_PACKAGE_CONTACT       "contact@rcsmobility.com")

#if(NOT CPACK_PACKAGING_INSTALL_PREFIX)
#  set(CPACK_PACKAGING_INSTALL_PREFIX "/opt/rcs")
#endif()

include(CPack)
