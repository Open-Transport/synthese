/** NotificationProviderTestService class header.
	@file NotificationTestService.hpp
	@author yves.martin
	@date 2015

	This file belongs to the SYNTHESE project (public transportation specialized software)
	Copyright (C) 2015 Hugues Romain - RCSmobility <contact@rcsmobility.com>

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

#ifndef SYNTHESE_NotificationProviderTestService_hpp__
#define SYNTHESE_NotificationProviderTestService_hpp__

#include <FactorableTemplate.h>
#include <Function.h>
#include <ParametersMap.h>

#include <string>

namespace synthese
{
	namespace server
	{
		class Request;
		class Session;
	} /* namespace server */

	namespace messages
	{
		/**
			17.15 Function : NotificationProvidersService.
			TODO See https://projects.open-transport.org/projects/terminus/wiki/NotificationProviders
			@ingroup m17Functions refFunctions
			@author yves.martin
			@date 2015

			This "notification_provider_test" service provides support to
			test script fields generation declared by a channel with a template
			scenario.
		*/
		class NotificationProviderTestService:
			public util::FactorableTemplate<server::Function, NotificationProviderTestService>

		{
		public:
			/// Service parameter to test script field generation
			static const std::string PARAMETER_NOTIFICATION_PROVIDER_ID;

			/// Scenario ID parameter to test script field generation
			static const std::string PARAMETER_TEST_SCENARIO_ID;

			/// Notification type parameter to test script field generation
			static const std::string PARAMETER_TEST_NOTIFICATION_TYPE;

			/// Notification channel parameters from current page
			static const std::string PARAMETER_TEST_PARAMETERS;

			/// Field tag with generated script fields from test operation
			static const std::string TAG_TEST_FIELD;

			/// Field name tag
			static const std::string TAG_FIELD_NAME;

			/// Field value tag
			static const std::string TAG_FIELD_VALUE;

		private:
			NotificationProvider* _notificationProvider;
			const Scenario* _testScenario;

		protected:
			//////////////////////////////////////////////////////////////////////////
			/// Generates a generic parameters map from the Service parameters.
			/// @return The generated parameters map
			util::ParametersMap _getParametersMap() const;

			//////////////////////////////////////////////////////////////////////////
			/// Reads the parameters of the Service on a generic parameters map.
			/// @param map Parameters map to interpret
			/// @exception ServiceException Occurs when some parameters are missing or incorrect.
			void _setFromParametersMap(const util::ParametersMap& map);

		public:
			NotificationProviderTestService();
			virtual ~NotificationProviderTestService() { };

			//////////////////////////////////////////////////////////////////////////
			/// Display of the content generated by the function.
			/// @param stream Stream to display the content on.
			/// @param request the current request
			/// @author yves.martin
			/// @date 2015
			virtual util::ParametersMap run(std::ostream& stream, const server::Request& request) const;

			//////////////////////////////////////////////////////////////////////////
			/// Gets if the function can be run according to the user of the session.
			/// @param session the current session
			/// @return true if the function can be run
			/// @author yves.martin
			/// @date 2015
			virtual bool isAuthorized(const server::Session* session) const;

			//////////////////////////////////////////////////////////////////////////
			/// Gets the Mime type of the content generated by the function.
			/// @return the Mime type of the content generated by the function
			/// @author yves.martin
			/// @date 2015
			virtual std::string getOutputMimeType() const;
		};

	} /* namespace messages */
} /* namespace synthese */

#endif /* SYNTHESE_NotificationProviderTestService_hpp__ */
