/** MediaLibrariesService class header.
	@file MediaLibrariesService.hpp
	@author Yves Martin
	@date 2015

	This file belongs to the SYNTHESE project (public transportation specialized software)
	Copyright (C) 2015 Hugues Romain - RCSmobility <contact@rcsmobility.com>

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

#ifndef SYNTHESE_MediaLibrariesService_hpp__
#define SYNTHESE_MediaLibrariesService_hpp__

#include <FactorableTemplate.h>
#include <Function.h>
#include <MediaLibrary.hpp>
#include <ParametersMap.h>

#include <string>

namespace synthese
{
	namespace server
	{
		class Request;
		class Session;
	} /* namespace server */

	namespace messages
	{
		/**
			17.15 Function : MediaLibrariesService.
			@ingroup m17Functions refFunctions
			@author Yves Martin
			@date 2015

			This "medialibraries" service allows to list MediaLibrary entities.
		*/
		class MediaLibrariesService:
			public util::FactorableTemplate<server::Function, MediaLibrariesService>

		{
		public:
			/// Tag holding a media library object
			static const std::string TAG_MEDIA_LIBRARY;

		private:
			//! \name Page parameters
			//@{
				MediaLibrary* _mediaLibrary;
			//@}

		protected:
			//////////////////////////////////////////////////////////////////////////
			/// Generates a generic parameters map from the Service parameters.
			/// @return The generated parameters map
			util::ParametersMap _getParametersMap() const;

			//////////////////////////////////////////////////////////////////////////
			/// Reads the parameters of the Service on a generic parameters map.
			/// @param map Parameters map to interpret
			/// @exception ServiceException Occurs when some parameters are missing or incorrect.
			void _setFromParametersMap(const util::ParametersMap& map);

		public:
			MediaLibrariesService();
			virtual ~MediaLibrariesService() { };

			//////////////////////////////////////////////////////////////////////////
			/// Display of the content generated by the function.
			/// @param stream Stream to display the content on.
			/// @param request the current request
			virtual util::ParametersMap run(std::ostream& stream, const server::Request& request) const;

			//////////////////////////////////////////////////////////////////////////
			/// Gets if the function can be run according to the user of the session.
			/// @param session the current session
			/// @return true if the function can be run
			virtual bool isAuthorized(const server::Session* session) const;

			//////////////////////////////////////////////////////////////////////////
			/// Gets the Mime type of the content generated by the function.
			/// @return the Mime type of the content generated by the function
			virtual std::string getOutputMimeType() const;
		};

	} /* namespace messages */
} /* namespace synthese */

#endif /* SYNTHESE_MediaLibrariesService_hpp__ */
