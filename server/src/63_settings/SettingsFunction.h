/** SettingsModule class header.
	@file SettingsModule.hpp

	This file belongs to the SYNTHESE project (public transportation specialized software)
	Copyright (C) 2002 Hugues Romain - RCSmobility <contact@rcsmobility.com>

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

#ifndef SYNTHESE_SettingsFunction_H__
#define SYNTHESE_SettingsFunction_H__

#include "FactorableTemplate.h"
#include "ParametersMap.h"
#include "Request.h"
#include "Function.h"

namespace synthese
{
	namespace cms
	{
		/**	Get or set a setting

		  Uses the Settings object to load and save values.

		  <h2> Parameters </h2>
		  * action : Can be "get" or "set"
		  * name : The setting name
		  * module : The setting module (see the Settings documentation)
		  * value : If the action is "set", the value to set. If the action is "get", the default value to return if the setting doesn't exists
		  * notify : Define if the object registered as listener should receive their notify flag at true or false. By default, true.

		  <h2>Output</h2>
		  If the action is "get", the asked value is returned.
		  If the value is not found, returns the value given in parameter.

		  If the action is "set", returns nothing.

		  **/
		class SettingsFunction:
			public util::FactorableTemplate<server::Function,SettingsFunction>
		{
		public:
			static const std::string PARAMETER_ACTION;
			static const std::string PARAMETER_NAME;
			static const std::string PARAMETER_MODULE;
			static const std::string PARAMETER_VALUE;
			static const std::string PARAMETER_NOTIFY;

		protected:
			//! \name parameters
			//@{
				std::string _action;
				std::string _name;
				std::string _module;
				std::string _value;
				bool _notify;
			//@}


			/** Conversion from attributes to generic parameter maps.
				@return Generated parameters map
				**/
			util::ParametersMap _getParametersMap() const;


			/** Conversion from generic parameters map to attributes.
				@param map Parameters map to interpret
				**/
			virtual void _setFromParametersMap(
				const util::ParametersMap& map
			);


		public:
			SettingsFunction();

			/** Display of the content generated by the function.
				@param stream Stream to display the content on.
				@param request the current request
			  **/
			virtual util::ParametersMap run(std::ostream& stream, const server::Request& request) const;


			/** Gets if the function can be run according to the user of the session.
				@param session the current session
				@return true if the function can be run
			  **/
			virtual bool isAuthorized(const server::Session* session) const;


			/** Gets the Mime type of the content generated by the function.
				@return "text/plain"
				**/
			virtual std::string getOutputMimeType() const;

		private:
			// Return the value or the given error
			std::string _getOrDie (
				const util::ParametersMap& map,
				const std::string& parameterName,
				const std::string& errorMsg
			);
		};
	}
}

#endif // SYNTHESE_SettingsFunction_H__
