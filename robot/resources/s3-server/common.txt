*** Settings ***
Library           OperatingSystem
Library           RequestsLibrary
Library           Process
Library           Telnet
Library           Collections
Library           DatabaseLibrary
Variables         variables.py


*** Variables ***
${S3_SERVER_BINARY}      /opt/rcs/synthese3/bin/s3-server
${S3_SERVER_LAUNCH_TIMEOUT}      5 min


*** Keywords ***
    
On Node ${node_id}
    Set Suite Variable   ${node}    ${NODES[${node_id}]}
    Log Many  Now using node ${node.node_id}  ${node.db_file}  ${node.url}
    
Start Synthese
    Start Synthese On Node ${node.node_id}

Start Synthese On Node ${node_id:\d+}
    ${tmp_node}=  Set Variable  ${NODES[${node_id}]}
    Create Directory  ${SUITE NAME}/${TEST NAME}/${tmp_node.node_dir}
    ${status}  ${message}=  Run Keyword And Ignore Error  File Should Exist  ${SUITE NAME}/${TEST NAME}/${tmp_node.node_dir}/${tmp_node.db_file}
    Run Keyword If  "${status}" == "FAIL"  With Empty Test Data  ${node_id}
    ${tmp_node.process_handle}=  Start Process  ${S3_SERVER_BINARY}  --pidfile  -  --dbconn\=sqlite://path\=${SUITE NAME}/${TEST NAME}/${tmp_node.node_dir}/${tmp_node.db_file}  --param  port\=${tmp_node.port}  --param  log_level\=0  --param  auto_login_user\=root  --param  ineo_terminus_port\=${tmp_node.ineo_port}  stderr=${SUITE NAME}/${TEST NAME}/${tmp_node.node_dir}/${tmp_node.err_file}  stdout=${SUITE NAME}/${TEST NAME}/${tmp_node.node_dir}/${tmp_node.out_file}
    Wait Until Keyword Succeeds    ${S3_SERVER_LAUNCH_TIMEOUT}    2 sec    Open Connection    localhost    ${None}    ${tmp_node.port}
    Run Keyword If  ${WITH_INEO_TERMINUS}  Wait Until Keyword Succeeds    1 min    5 sec    Open Connection    localhost    ${None}    ${tmp_node.ineo_port}

Stop Synthese
    Stop Synthese On Node ${node.node_id}

Stop Synthese On Node ${node_id}
    ${tmp_node}=  Set Variable  ${NODES[${node_id}]}
    Terminate Process  handle=${tmp_node.process_handle}
    ${tmp_node.process_handle}=  Set Variable  None


With Empty Test Data
    [Arguments]  ${node_id}
    ${tmp_node}=  Set Variable  ${NODES[${node_id}]}
    ${status}  ${message}=  Run Keyword And Ignore Error  Variable Should Exist  ${empty_db_file}
    Run Keyword If  "${status}" != "FAIL"  Copy File    ${empty_db_file}    ${SUITE NAME}/${TEST NAME}/${tmp_node.node_dir}/${tmp_node.db_file}
    Run Keyword If  "${status}" != "FAIL"  Return From Keyword
    Set Global Variable  ${empty_db_file}  ${TEMPDIR}/empty_config.db3
    Remove File  ${empty_db_file}
    ${tmp_handle}=  Start Process  ${S3_SERVER_BINARY}  --pidfile  -  --dbconn\=sqlite://path\=${empty_db_file}  --param  port\=9999  --param  log_level\=0  --param  auto_login_user\=root  stderr=/tmp/s3.err  stdout=/tmp/s3.out
    Wait Until Keyword Succeeds    ${S3_SERVER_LAUNCH_TIMEOUT}    2 sec    Open Connection    localhost    ${None}    9999
    Terminate Process  handle=${tmp_handle}
    File Should Exist  ${empty_db_file}
    Copy File    ${empty_db_file}    ${SUITE NAME}/${TEST NAME}/${tmp_node.node_dir}/${tmp_node.db_file}    

With Test Data
    [Arguments]    ${test_data}
    Copy File    ${test_data}    ${SUITE NAME}/${TEST NAME}/${node.node_dir}/${node.db_file}

With SQL Test Data
    [Arguments]    ${sql_test_data}
    With Empty Test Data  ${node.node_id}
    ${conn}=  Connect To Spatialite Database  ./${SUITE NAME}/${TEST NAME}/${node.node_dir}/${node.db_file}
    Execute Spatialite Script  ${conn}  ${sql_test_data}
    Disconnect From Spatialite Database  ${conn}

Delete Synthese Objects
    [Arguments]    ${table_name}
    Connect To Database Using Custom Params    sqlite3   database="./${SUITE NAME}/${TEST NAME}/${node.node_dir}/${node.db_file}"
    @{query_results}=   Query    SELECT id FROM ${table_name};
    :FOR   ${id}   in    @{query_results}    
    \   Delete Synthese Object   ${id[0]}
    Disconnect From Database

Process Alerts
    ${http_response}=    Call Synthese Action    ProcessAlertsAction
    Should Be Equal As Strings    ${http_response.status_code}    200

Call Synthese Service
    [Arguments]    ${service_name}    @{varargs}
    Create Session    synthese    ${node.url}
    ${service_parameters}=    Catenate    SEPARATOR=&    @{varargs}
    Log Many   ${node.url}?SERVICE=${service_name}&${service_parameters}
    ${http_response}=    Get Request    synthese    ?SERVICE=${service_name}&${service_parameters}
    [Return]    ${http_response}

Call Synthese Action
    [Arguments]    ${action_name}    @{varargs}
    Create Session    synthese    ${node.url}
    ${action_parameters}=    Catenate    SEPARATOR=&    @{varargs}
    Log Many   ${node.url}?SERVICE=action&of=xml&action_name=${action_name}&${action_parameters}
    ${http_response}=    Get Request    synthese    ?SERVICE=action&of=xml&action_name=${action_name}&${action_parameters}
    [Return]    ${http_response}
